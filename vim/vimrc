set nocompatible

" add dotfiles/vim to runtime path
set rtp+=/etc/dotfiles/vim

call plug#begin('/etc/dotfiles/vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'dyng/ctrlsf.vim'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'scrooloose/syntastic'
Plug 'fatih/vim-go'

call plug#end()

" set leader to comma
let mapleader = ","

" Colorscheme
colorscheme menski

" Gui options
set guioptions=aeg

" Enable mouse
set mouse=a

" Add line numbers
set number
set history=50

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg

" Set statusline
set statusline=%<%n:%f\ %y[%{&ff}]%r%m%=%-19(%3l,%02c%03V%)%7(%P%)\ [%LL]\ [%<%1.20{getcwd()}]
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" Enable cursorline
set cursorline

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Search related settings
set hlsearch
set ignorecase
set smartcase

" Wildmenu settings
set wildmode=longest:full

" Disable code folding
set nofoldenable

" Directories for swp files
if !isdirectory($HOME.'/.local/share/vim/backup')
    call mkdir($HOME.'/.local/share/vim/backup', 'p')
endif
set backupdir=~/.local/share/vim/backup/

if !isdirectory($HOME.'/.local/share/vim/swap')
    call mkdir($HOME.'/.local/share/vim/swap', 'p')
endif
set directory=~/.local/share/vim/swap/

if exists("&undofile")
  if !isdirectory($HOME.'/.local/share/vim/undo')
      call mkdir($HOME.'/.local/share/vim/undo', 'p')
  endif
  set undofile
  set undodir=~/.local/share/vim/undo
endif

" Split settings
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow
set splitright

" Strip trailing whitespaces on each save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

let g:toggleStripTrailingWhitespaces = 0
function! ToggleStripTrailingWhitespaces(...)
  if a:0 == 1 "toggle behaviour
    let g:toggleStripTrailingWhitespaces = 1 - g:toggleStripTrailingWhitespaces
  endif

  if g:toggleStripTrailingWhitespaces == 0 "normal action, do the hi
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
  else
    autocmd! BufWritePre
  endif
endfunction

autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
map <F12> :call ToggleStripTrailingWhitespaces(1)<CR>

autocmd FileType markdown setlocal spell

" make uses real tabs
au FileType make set noexpandtab

let g:syntastic_auto_loc_list = 0
let g:ycm_confirm_extra_conf = 0

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79 colorcolumn=80
let g:syntastic_python_checkers = ['pylama']
let g:syntastic_java_checkers = ['']

" gitcommit
au FileType gitcommit set colorcolumn=70 spell

" simple TODO list
command Todo Ack! -i 'TODO|FIXME|XXX'

" CtrlP Tag finding
noremap <F9> :CtrlPTag<CR>
noremap <C-B> :CtrlPBuffer<CR>

" close buffer without close window
nnoremap <leader>d :bprevious<CR>:bdelete #<CR>

" enable per project vimrc  http://damien.lespiau.name/blog/2009/03/18/per-project-vimrc/
set exrc
set secure
